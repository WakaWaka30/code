#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>
#include <string.h>
#include <math.h>

int IP[] =
{
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17,  9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};
 
int E[] =
{
    32,  1,  2,  3,  4,  5,
    4,  5,  6,  7,  8,  9,
    8,  9, 10, 11, 12, 13,
    12, 13, 14, 15, 16, 17,
    16, 17, 18, 19, 20, 21,
    20, 21, 22, 23, 24, 25,
    24, 25, 26, 27, 28, 29,
    28, 29, 30, 31, 32,  1
};
 
int P[] =
{
    16,  7, 20, 21,
    29, 12, 28, 17,
    1, 15, 23, 26,
    5, 18, 31, 10,
    2,  8, 24, 14,
    32, 27,  3,  9,
    19, 13, 30,  6,
    22, 11,  4, 25
};
 
int FP[] =
{
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41,  9, 49, 17, 57, 25
};
 
int SBOX[8][4][16] = 
{
        14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7,
        0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
        4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
        15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13,
 


    15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10,
    3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
    0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
    13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9,
 


    10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8,
    13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
    13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
    1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12,
 


    7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15,
    13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,
    10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
    3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14,


    2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9,
    14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
    4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
    11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3,
 


    12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11,
    10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
    9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
    4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13,
 


    4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1,
    13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
    1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
    6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12,
 

    13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7,
    1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
    7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
    2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11
};
 
int PC1[] =
{
    57, 49, 41, 33, 25, 17,  9,
    1, 58, 50, 42, 34, 26, 18,
    10,  2, 59, 51, 43, 35, 27,
    19, 11,  3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7, 62, 54, 46, 38, 30, 22,
    14,  6, 61, 53, 45, 37, 29,
    21, 13,  5, 28, 20, 12,  4
};
 
int PC2[] =
{
    14, 17, 11, 24,  1,  5,
    3, 28, 15,  6, 21, 10,
    23, 19, 12,  4, 26,  8,
    16,  7, 27, 20, 13,  2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};

uint8_t** toBlockSet(char* str){//PKCS#5 padding
    
    int l = strlen(str);
    
    int blocks = (l/8)+1;
    uint8_t padding = l%8;
    int i=0,j=0;
    
    uint8_t** set = (uint8_t**)malloc(blocks*sizeof(uint8_t*));
    for(i=0;i<blocks;i++)
        set[i] = (uint8_t*)malloc(8*sizeof(uint8_t));
    int k=0;
    for(i=0;i<blocks;i++)
        for(j=0;j<8 && str[k] != '\0';j++){
            set[i][j] = str[k];
            k++;
        }
    
    if(padding != 0){
        
        for(i=(int)padding;i<8;i++)
            set[blocks-1][i] = 8-padding;
    }
    
    else{
        for(i=0;i<8;i++)
            set[blocks-1][i] = 0x08;
    }
    
    return set;
    
    
    
    
    
}

char* toBinary(uint8_t x){
    
    char* bin = (char*)malloc(8*sizeof(char));
    uint8_t y = x;
    int i=0;
    while(1){
        bin[7-i] = 48+y%2;
        y = y/2;
        i++;
        if(i == 8)
            break;
    }
    for(i=0;i<8;i++)
        if(bin[i] != '1')
            bin[i] = '0';
    return bin;
    
    
}

uint8_t** InPerm(uint8_t** set, int blocks){
    
    struct {
        unsigned int bits : 1;
    }setbin[blocks][64],setbin1[blocks][64];
    
    char* str;
    
    int i=0,j=0,k=0,k1=0;

    for(i=0;i<blocks;i++){
        
        k=0;
        for(j=0;j<8;j++){
            
            str = toBinary(set[i][j]);
            k1=0;
            while(str[k1] != '\0'){
                if(str[k1] == '1')
                    setbin[i][k].bits = 1;
                else
                    setbin[i][k].bits = 0;
                k1++;
                k++;
            }
        }
    }
    
    
    
        
    /*for(i=0;i<blocks;i++){
        printf("%dth block:-\n",i+1);
        for(j=0;j<64;j++){
            if(j%8 == 0)
                printf(" ");
            printf("%d",setbin[i][j].bits);    
        }
        printf("\n");
    }*/
    
    for(i=0;i<blocks;i++)
        for(j=0;j<64;j++)
            setbin1[i][j] = setbin[i][j];
            
    for(i=0;i<blocks;i++)
        for(j=0;j<64;j++)
            setbin[i][j] = setbin1[i][IP[j]-1];
    
    int j1=0;
    for(i=0;i<blocks;i++){
        
        j=0;
        
        while(j<8){
            set[i][j] = 0;    
            j1=0;
            while(j1<8){
                set[i][j] = set[i][j]+pow(2,7-j1)*setbin[i][8*j+j1].bits;
                j1++;
            }
            j++;
        }
        
    }
    
    return set;
    
    
}

uint8_t** FinalPerm(uint8_t** set, int blocks){
    struct {
        unsigned int bits : 1;
    }setbin[blocks][64],setbin1[blocks][64];
    
    char* str;
    
    int i=0,j=0,k=0,k1=0;
    
    for(i=0;i<blocks;i++){
        
        k=0;
        for(j=0;j<8;j++){
            
            str = toBinary(set[i][j]);
            k1=0;
            while(str[k1] != '\0'){
                if(str[k1] == '1')
                    setbin[i][k].bits = 1;
                else
                    setbin[i][k].bits = 0;
                k1++;
                k++;
            }
        }
    }
    
    
    
        
    
    
    for(i=0;i<blocks;i++)
        for(j=0;j<64;j++)
            setbin1[i][j] = setbin[i][j];
            
    for(i=0;i<blocks;i++)
        for(j=0;j<64;j++)
            setbin[i][j] = setbin1[i][FP[j]-1];
    
    int j1=0;
    for(i=0;i<blocks;i++){
        
        j=0;
        
        while(j<8){
            set[i][j] = 0;    
            j1=0;
            while(j1<8){
                set[i][j] = set[i][j]+pow(2,7-j1)*setbin[i][8*j+j1].bits;
                j1++;
            }
            j++;
        }
        
    }
    
    return set;
    
     
}

int mod(int a, int b){
    int res=0;
    if(a>0)
        res = a%b;
    else{
        res = a;
        while(1){
            
            res = res+b;
            if(res>=0)
                break;
        }
    }
    return res;
}

uint8_t* KeyGenerator(uint8_t* key, int roundval){
    struct {
        unsigned int bits : 1;
    }keybin[64],keybin1[56],C0[28],D0[28],Cr[28],Dr[28],finalbin[48],Cr1[28],Dr1[28];
    
    char* str;
    
    int i=0,j=0,k=0,k1=0;

    
        
    k=0;
    for(j=0;j<8;j++){
            
        str = toBinary(key[j]);
        k1=0;
        while(str[k1] != '\0'){
            if(str[k1] == '1')
                keybin[k].bits = 1;
            else
                keybin[k].bits = 0;
            k1++;
            k++;
        }
    }
    
    
    k1=0;
    
    for(i=0;i<56;i++)
        keybin1[i] = keybin[PC1[i]-1];
            
    
    /*printf("\nAfter PC1:-\n");
    for(j=0;j<56;j++){
            if(j%8 == 0)
                printf(" ");
            printf("%d",keybin1[j].bits);    
    }*/
    
    for(i=0;i<28;i++)
       C0[i] = keybin1[i];
    
    for(i=0;i<28;i++)
       D0[i] = keybin1[i+28];
    k=1;
    int x=0;
    while(k<=roundval){
        if(k == 1 || k == 2 || k == 9 || k == 16)
            x++;
        else
            x = x+2;
        k++;    
    }
    //printf("\nNumber of Shifts in round: %d is %d\n",roundval,x);
    for(i=0;i<28;i++){
            Cr[i].bits = C0[i].bits; 
            Dr[i].bits = D0[i].bits;
    }
    
    
    for(k=0;k<x;k++){
        for(i=0;i<28;i++){
            Cr1[i].bits = Cr[i].bits; 
            Dr1[i].bits = Dr[i].bits;
        }
        for(i=0;i<28;i++){
            Cr[i].bits = Cr1[mod(i+1,28)].bits; 
            Dr[i].bits = Dr1[mod(i+1,28)].bits;
        }
        /*printf("Values after %dth left shift\nC%d:-\n",k+1,roundval);
        for(j=0;j<28;j++)
           
            printf("%d",Cr[j].bits);   
        printf("\nD%d:-\n",roundval);
        for(j=0;j<28;j++)
           
            printf("%d",Dr[j].bits);   
    */
        
    }/*
    printf("\nC%d:-\n",roundval);
    for(j=0;j<28;j++)
           
            printf("%d",Cr[j].bits);   
    printf("\nD%d:-\n",roundval);
    for(j=0;j<28;j++)
           
            printf("%d",Dr[j].bits);   
    */
    for(i=0;i<28;i++){
        keybin1[i] = Cr[i];
        keybin1[28+i] = Dr[i];
    }
    
    for(i=0;i<48;i++)
        finalbin[i] = keybin1[PC2[i]-1];
    /*printf("\nKey for round %d:-\n",roundval);
    for(j=0;j<48;j++){
            if(j%6 == 0)
                printf(" ");
            printf("%d",finalbin[j].bits);  
    }*/
    
    int j1=0;
    
    j=0;
    uint8_t* reskey = (uint8_t*)malloc(6*sizeof(uint8_t));
    while(j<6){
            reskey[j] = 0;    
            j1=0;
            while(j1<8){
                reskey[j] = reskey[j]+pow(2,7-j1)*finalbin[8*j+j1].bits;
                j1++;
            }
            j++;
    }
    
    return reskey;
    
    
}

uint8_t* Function(uint8_t* rh, uint8_t* key, int roundval){
    struct {
        unsigned int bits : 1;
    }rhbin[32],rhebin[48],sbbin[48],sbin1[8][6],sbin2[8][4],resbin[32],resbin1[32];
    
    char* str;
    
    int i=0,j=0,k=0,k1=0;

    
        
    k=0;
    for(j=0;j<4;j++){
            
        str = toBinary(rh[j]);
        k1=0;
        while(str[k1] != '\0'){
            if(str[k1] == '1')
                rhbin[k].bits = 1;
            else
                rhbin[k].bits = 0;
            k1++;
            k++;
        }
    }
    int j1=0;
    /*for(j=0;j<32;j++){
        if(j%4 == 0 && j!=0)
            printf(" ");
        printf("%d",rhbin[j].bits);    
    }*/
    for(i=0;i<48;i++)
        rhebin[i] = rhbin[E[i]-1];
        
    /*printf("\nAfter Expansion:-\n");
    for(j=0;j<48;j++){
        if(j%6 == 0 && j!=0)
            printf(" ");
        printf("%d",rhebin[j].bits);    
    }*/
    
    uint8_t* mid = (uint8_t*)malloc(6*sizeof(uint8_t));
    j=0,j1=0;
    while(j<6){
            mid[j] = 0;    
            j1=0;
            while(j1<8){
                mid[j] = mid[j]+pow(2,7-j1)*rhebin[8*j+j1].bits;
                j1++;
            }
            j++;
    }
    
    uint8_t* key1 = KeyGenerator(key,roundval);
    for(i=0;i<6;i++)
        mid[i] = mid[i]^key1[i];
    k=0;
    for(j=0;j<6;j++){
            
        str = toBinary(mid[j]);
        k1=0;
        while(str[k1] != '\0'){
            if(str[k1] == '1')
                sbbin[k].bits = 1;
            else
                sbbin[k].bits = 0;
            k1++;
            k++;
        }
    } 
    
    /*printf("\nAfter XORing with key:-\n");
    for(j=0;j<48;j++){
        if(j%6 == 0 && j!=0)
            printf(" ");
        printf("%d",sbbin[j].bits);    
    }*/
    k=0;
    for(i=0;i<8;i++)
        for(j=0;j<6;j++){
            sbin1[i][j] = sbbin[k];
            k++;
        }
    /*printf("\nAfter Conversion to 8x6 matrix:-\n");    
    for(i=0;i<8;i++){
        for(j=0;j<6;j++)
            printf("%d",sbin1[i][j].bits);
            
        printf("\n");
    }*/
    int row, col;
    uint8_t x;
    for(i=0;i<8;i++){
        row = 2*sbin1[i][0].bits + sbin1[i][5].bits;
        col = 8*sbin1[i][1].bits + 4*sbin1[i][2].bits + 2*sbin1[i][3].bits + sbin1[i][4].bits; 
        //printf("Value of row: %d, Value of column: %d\n",row,col);
        x = SBOX[i][row][col];
        
        //printf("Value of x: %d\n",x);
            
        str = toBinary(x);
        //printf("%s\n",str);
        k1=0;
        k=0;
        while(str[k1] != '\0'){
            if(str[4+k1] == '1')
                sbin2[i][k].bits = 1;
            else
                sbin2[i][k].bits = 0;
            k1++;
            k++;
        }
    
    }
    
    /*printf("\nAfter SBOX Conversion to 8x4 matrix:-\n");    
    for(i=0;i<8;i++){
        for(j=0;j<4;j++)
            printf("%d",sbin2[i][j].bits);
            
        printf("\n");
    }*/
    k=0;
    for(i=0;i<8;i++)
        for(j=0;j<4;j++){
            resbin[k].bits = sbin2[i][j].bits;
            k++;
        }
    /*printf("Resbin:-\n");
    for(i=0;i<32;i++){
        if(i%4 == 0 && i!=0)
            printf(" ");
        printf("%d",resbin[i].bits);    
    }*/
    
    for(i=0;i<32;i++)
        resbin1[i] = resbin[i];
        
    for(i=0;i<32;i++)
        resbin[i] = resbin1[P[i]-1];
    /*printf("Final Output:-\n");
    for(i=0;i<32;i++){
        if(i%4 == 0 && i!=0)
            printf(" ");
        printf("%d",resbin[i].bits);    
    } */
    
    uint8_t* res = (uint8_t*)malloc(4*sizeof(uint8_t));
    j=0,k=0,k1=0;
    while(j<4){
            res[j] = 0;    
            j1=0;
            while(j1<8){
                res[j] = res[j]+pow(2,7-j1)*resbin[8*j+j1].bits;
                j1++;
            }
            j++;
    }
    /*printf("Final Output in hex:-\n");
    for(i=0;i<4;i++)
        printf("%X ",res[i]);*/
    return res;    
}

uint8_t* Function2(uint8_t* rh, uint8_t* key, int roundval){
    struct {
        unsigned int bits : 1;
    }rhbin[32],rhebin[48],sbbin[48],sbin1[8][6],sbin2[8][4],resbin[32],resbin1[32];
    
    char* str;
    
    int i=0,j=0,k=0,k1=0;

    
        
    k=0;
    for(j=0;j<4;j++){
            
        str = toBinary(rh[j]);
        k1=0;
        while(str[k1] != '\0'){
            if(str[k1] == '1')
                rhbin[k].bits = 1;
            else
                rhbin[k].bits = 0;
            k1++;
            k++;
        }
    }
    int j1=0;
    /*for(j=0;j<32;j++){
        if(j%4 == 0 && j!=0)
            printf(" ");
        printf("%d",rhbin[j].bits);    
    }*/
    for(i=0;i<48;i++)
        rhebin[i] = rhbin[E[i]-1];
        
    /*printf("\nAfter Expansion:-\n");
    for(j=0;j<48;j++){
        if(j%6 == 0 && j!=0)
            printf(" ");
        printf("%d",rhebin[j].bits);    
    }*/
    
    uint8_t* mid = (uint8_t*)malloc(6*sizeof(uint8_t));
    j=0,j1=0;
    while(j<6){
            mid[j] = 0;    
            j1=0;
            while(j1<8){
                mid[j] = mid[j]+pow(2,7-j1)*rhebin[8*j+j1].bits;
                j1++;
            }
            j++;
    }
    
    uint8_t* key1 = KeyGenerator(key,17-roundval);
    for(i=0;i<6;i++)
        mid[i] = mid[i]^key1[i];
    k=0;
    for(j=0;j<6;j++){
            
        str = toBinary(mid[j]);
        k1=0;
        while(str[k1] != '\0'){
            if(str[k1] == '1')
                sbbin[k].bits = 1;
            else
                sbbin[k].bits = 0;
            k1++;
            k++;
        }
    } 
    
    /*printf("\nAfter XORing with key:-\n");
    for(j=0;j<48;j++){
        if(j%6 == 0 && j!=0)
            printf(" ");
        printf("%d",sbbin[j].bits);    
    }*/
    k=0;
    for(i=0;i<8;i++)
        for(j=0;j<6;j++){
            sbin1[i][j] = sbbin[k];
            k++;
        }
    /*printf("\nAfter Conversion to 8x6 matrix:-\n");    
    for(i=0;i<8;i++){
        for(j=0;j<6;j++)
            printf("%d",sbin1[i][j].bits);
            
        printf("\n");
    }*/
    int row, col;
    uint8_t x;
    for(i=0;i<8;i++){
        row = 2*sbin1[i][0].bits + sbin1[i][5].bits;
        col = 8*sbin1[i][1].bits + 4*sbin1[i][2].bits + 2*sbin1[i][3].bits + sbin1[i][4].bits; 
        //printf("Value of row: %d, Value of column: %d\n",row,col);
        x = SBOX[i][row][col];
        
        //printf("Value of x: %d\n",x);
            
        str = toBinary(x);
        //printf("%s\n",str);
        k1=0;
        k=0;
        while(str[k1] != '\0'){
            if(str[4+k1] == '1')
                sbin2[i][k].bits = 1;
            else
                sbin2[i][k].bits = 0;
            k1++;
            k++;
        }
    
    }
    
    /*printf("\nAfter SBOX Conversion to 8x4 matrix:-\n");    
    for(i=0;i<8;i++){
        for(j=0;j<4;j++)
            printf("%d",sbin2[i][j].bits);
            
        printf("\n");
    }*/
    k=0;
    for(i=0;i<8;i++)
        for(j=0;j<4;j++){
            resbin[k].bits = sbin2[i][j].bits;
            k++;
        }
    /*printf("Resbin:-\n");
    for(i=0;i<32;i++){
        if(i%4 == 0 && i!=0)
            printf(" ");
        printf("%d",resbin[i].bits);    
    }*/
    
    for(i=0;i<32;i++)
        resbin1[i] = resbin[i];
        
    for(i=0;i<32;i++)
        resbin[i] = resbin1[P[i]-1];
    /*printf("Final Output:-\n");
    for(i=0;i<32;i++){
        if(i%4 == 0 && i!=0)
            printf(" ");
        printf("%d",resbin[i].bits);    
    } */
    
    uint8_t* res = (uint8_t*)malloc(4*sizeof(uint8_t));
    j=0,k=0,k1=0;
    while(j<4){
            res[j] = 0;    
            j1=0;
            while(j1<8){
                res[j] = res[j]+pow(2,7-j1)*resbin[8*j+j1].bits;
                j1++;
            }
            j++;
    }
    /*printf("Final Output in hex:-\n");
    for(i=0;i<4;i++)
        printf("%X ",res[i]);*/
    return res;    
}

uint8_t** OneRoundEncrypt(uint8_t** set, uint8_t* key, int roundval, int blocks){
    
    uint8_t* left = (uint8_t*)malloc(4*sizeof(uint8_t));
    uint8_t* right = (uint8_t*)malloc(4*sizeof(uint8_t));
    uint8_t* nright = (uint8_t*)malloc(4*sizeof(uint8_t));
    int i=0,j=0,k=0;
    for(i=0;i<blocks;i++){
        for(j=0;j<4;j++){
            left[j] = set[i][j];
            right[j] = set[i][4+j];
        }
           
        for(j=0;j<4;j++)
            set[i][j] = right[j];
        
        nright = Function(right,key,roundval);
        
        for(j=0;j<4;j++)
            nright[j] = left[j]^nright[j];
        
        for(j=0;j<4;j++)
            set[i][4+j] = nright[j];
         
            
    }
    
    return set;
        
    
}

char* toString(uint8_t** set, int blocks, int padding){
    
    int i=0,j=0,k=0;
    
    int l = (blocks-1)*8+padding;
    
    char* str = (char*)malloc(l*sizeof(char));
    
    for(i=0;i<blocks;i++)
        for(j=0;j<8;j++){
            str[k] = set[i][j];
            k++;
        }
    
    return str;    
    
}

uint8_t** OneRoundDecrypt(uint8_t** set, uint8_t* key, int roundval, int blocks){
    
    uint8_t* left = (uint8_t*)malloc(4*sizeof(uint8_t));
    uint8_t* right = (uint8_t*)malloc(4*sizeof(uint8_t));
    uint8_t* nright = (uint8_t*)malloc(4*sizeof(uint8_t));
    int i=0,j=0,k=0;
    for(i=0;i<blocks;i++){
        for(j=0;j<4;j++){
            left[j] = set[i][j];
            right[j] = set[i][4+j];
        }
           
        for(j=0;j<4;j++)
            set[i][j] = right[j];
        
        nright = Function2(right,key,roundval);
        
        for(j=0;j<4;j++)
            nright[j] = left[j]^nright[j];
        
        for(j=0;j<4;j++)
            set[i][4+j] = nright[j];
         
            
    }
    
    return set;
        
    
}

uint8_t** DESEncrypt(uint8_t** set, uint8_t* key, int blocks){
    
    int i=0,j=0,k=0;
    
    
    k=1;
    uint8_t* reskey;
    set = InPerm(set,blocks);
    /*printf("Afer IP:-\n");
    for(i=0;i<blocks;i++)
        for(j=0;j<8;j++)
            printf("%X ",set[i][j]);*/
    
    for(k=1;k<=16;k++){
        set = OneRoundEncrypt(set,key,k,blocks);
        /*printf("\nKey for round %d:-\n",k);
        reskey = KeyGenerator(key,k);
        for(i=0;i<6;i++)
            printf("%X ",reskey[i]);    
        printf("\nAfter round %d:-\n",k);
        for(i=0;i<blocks;i++)
            for(j=0;j<8;j++)
                printf("%X ",set[i][j]);
        printf("\n\n\n");    */    
    }
    uint8_t** set1 = (uint8_t**)malloc(blocks*sizeof(uint8_t*));
    for(i=0;i<blocks;i++)
        set1[i] = (uint8_t*)malloc(8*sizeof(uint8_t));
        
    for(i=0;i<blocks;i++)
        for(j=0;j<8;j++)
            set1[i][j] = set[i][j];
            
    for(i=0;i<blocks;i++)
        for(j=0;j<4;j++){
            set[i][j] = set1[i][4+j];
            set[i][4+j] = set1[i][j];
        }
    set = FinalPerm(set,blocks);
    
    return set;
    
    
    
    
}

uint8_t** DESDecrypt(uint8_t** set, uint8_t* key, int blocks){
    
    int i=0,j=0,k=0;
    
    
    k=1;
    uint8_t* reskey;
    set = InPerm(set,blocks);
    /*printf("Afer IP:-\n");
    for(i=0;i<blocks;i++)
        for(j=0;j<8;j++)
            printf("%X ",set[i][j]);*/
    
    for(k=1;k<=16;k++){
        set = OneRoundDecrypt(set,key,k,blocks);
        /*printf("\nKey for round %d:-\n",k);
        //reskey = KeyGenerator(key,k);
        //for(i=0;i<6;i++)
            //printf("%X ",reskey[i]);    
        //printf("\nAfter round %d:-\n",k);
        //for(i=0;i<blocks;i++)
            //for(j=0;j<8;j++)
                //printf("%X ",set[i][j]);
        //printf("\n\n\n");  */      
    }
    uint8_t** set1 = (uint8_t**)malloc(blocks*sizeof(uint8_t*));
    for(i=0;i<blocks;i++)
        set1[i] = (uint8_t*)malloc(8*sizeof(uint8_t));
        
    for(i=0;i<blocks;i++)
        for(j=0;j<8;j++)
            set1[i][j] = set[i][j];
            
    for(i=0;i<blocks;i++)
        for(j=0;j<4;j++){
            set[i][j] = set1[i][4+j];
            set[i][4+j] = set1[i][j];
        }
    set = FinalPerm(set,blocks);
    
    return set;
}

int main(){
    printf("Enter 1 for Encryption\nEnter 2 for Decryption: ");
    int x;
    scanf("%d",&x);
    if(x == 1){
        char str[100];
        printf("Enter string: ");
        scanf("\n%[^\n]%*c",str);
        int l = strlen(str);
        int blocks = (l/8)+1;
        int padding = l%8;
        int i=0,j=0;
        char* str1 = (char*)malloc(l*sizeof(char));
        while(str[j]!='\0'){
            str1[j] = str[j];
            j++;
        }
    
        uint8_t** set = toBlockSet(str1);
        char key[100];
        printf("Enter key: ");
        scanf("\n%[^\n]%*c",key);
        int l1 = strlen(key);
        uint8_t* key1;
        if(l1 == 8){
    
            key1 = (uint8_t*)malloc(8*sizeof(uint8_t));
            for(i=0;i<8;i++)
                key1[i] = key[i];
            uint8_t** res = DESEncrypt(set,key1,blocks);
            printf("\nCiphertext is:-\n");
            for(i=0;i<blocks;i++){
                for(j=0;j<8;j++){
                    
                    if(res[i][j]/16 == 0)
                        printf("0%X",res[i][j]);
                    else
                        printf("%X",res[i][j]);
                }
                
            }   
        }
        else
            printf("Invalid Key Size");
    }
    
    else{
    
        printf("Enter ciphertext in hexadecimal format (without space): ");
        char str[100];
        int i=0,j=0;
        scanf("\n%[^\n]%*c",str);
        int l = strlen(str);
        int count = 0;
        for(i=0;str[i]!='\0';i++)
            if(str[i] == ' ')
                count++;
                
        
        char* str1 = (char*)malloc(l*sizeof(char));
        j=0;
        while(str[j]!='\0'){
            if(str[j] != ' ')
            str1[j] = str[j];
            j++;
        }
        l = strlen(str1);
       
        int blocks = (l/16);
        int padding = l%8;
        FILE* ptr = fopen("data.txt","w");
        j=0;
        while(str1[j+1] != '\0'){
            fprintf(ptr,"%c%c\n",str[j],str[j+1]);
            j = j+2;
        }
        fclose(ptr);
        ptr = fopen("data.txt","r");
        uint8_t** set = (uint8_t**)malloc(blocks*sizeof(uint8_t*));
        for(i=0;i<blocks;i++)
            set[i] = (uint8_t*)malloc(8*sizeof(uint8_t));
        for(i=0;i<blocks;i++)
            for(j=0;j<8;j++)
                fscanf(ptr,"%hhX",&set[i][j]);
        char key[100];
        printf("Enter key: ");
        scanf("\n%[^\n]%*c",key);
        int l1 = strlen(key);
        uint8_t* key1;
        if(l1 == 8){
             /*key1[0] = 0x5b;
            key1[1] = 0x5a;
            key1[2] = 0x57;
            key1[3] = 0x67;
            key1[4] = 0x6a;
            key1[5] = 0x56;
            key1[6] = 0x67;
            key1[7] = 0x6e;
            uint8_t* reskey = KeyGenerator(key1,16);
        
            printf("\nKey for round %d in hex:-\n",16);
            for(i=0;i<6;i++)
                printf("%X ",reskey[i]);
            printf("\n\n\n");
            */    
            key1 = (uint8_t*)malloc(8*sizeof(uint8_t));
            for(i=0;i<8;i++)
                key1[i] = key[i];
            
            uint8_t** res1 = DESDecrypt(set,key1,blocks);
            printf("\nDecrypted message is:-\n");
            for(i=0;i<blocks;i++){
                for(j=0;j<8;j++){
                    if(res1[i][j]/16 == 0)
                        printf("0%X",res1[i][j]);
                    else    
                        printf("%X",res1[i][j]);
                }
            }
    
            char* str2 = toString(set,blocks,padding);
            printf("\nDecrypted Message in text form: %s",str2);    
        
        }
        
        else
            printf("Invalid Key Size");
    
       
    }
    return 0;
}
