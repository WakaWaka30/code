#include <stdio.h>
#include <stdlib.h>

int max(int a, int b){
    if(a>=b)
        return a;
    else
        return b;
}

int findinrow(int* arr, int a, int n){
    int i=0;
    for(i=0;i<n;i++)
        if(arr[i] == a)
            break;
    if(i == n)
        return 1;
    else
        return 0;
}

int* knapsack01(int* profit, int* weight, int n, int maxw){
    
    int i=0,j=0;
    int** knap = (int**)malloc((n+1)*sizeof(int*));
    for(i=0;i<=n;i++)
        *(knap+i) = (int*)malloc((maxw+1)*sizeof(int));
    int* optselect = (int*)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        for(j=0;j<maxw;j++)
            knap[i][j] = 0;
    
    for(i=1;i<=n;i++)
        for(j=1;j<=maxw;j++){
            if((j-weight[i-1])>=0)
                knap[i][j] = max(knap[i-1][j],(profit[i-1]+knap[i-1][j-weight[i-1]]));
            else
                knap[i][j] = knap[i-1][j];    
        }
    printf("Knapsack Table:-\n");
    for(i=0;i<=n;i++){
        for(j=0;j<=maxw;j++)
            printf("%d\t",knap[i][j]);
        printf("\n");    
    }
    int maxp = knap[n][maxw];
    for(i=n;i>0;i--){
        if(findinrow(*(knap+i-1),maxp,maxw+1) == 0)
            optselect[i-1] = 0;
            
        
        else{
            optselect[i-1] = 1;
            
            maxp = maxp - profit[i-1];
            
        }    
    }
    
    
    
    
    
    printf("\nThe maximum profit for this knapsack is %d\n",knap[n][maxw]);
    return optselect;
    
}

int main(){
    int n,maxw;
    printf("Enter number of items for knapsack: ");
    scanf("%d",&n);
    int i=0;
    printf("Enter maximum capacity of knapsack: ");
    scanf("%d",&maxw);
    int* profit = (int*)malloc(n*sizeof(int));
    int* weight = (int*)malloc(n*sizeof(int));
    printf("Enter profits and weights for each item:-\n");
    for(i=0;i<n;i++){
        printf("Enter profit of %dth item: ",i+1);
        scanf("%d",(profit+i));
        printf("Enter weight of %dth item: ",i+1);
        scanf("%d",(weight+i));
        if(weight[i]<=0){
            printf("Weight of an item should be greater than zero");
            return 0;
        }
        
    }
    
    int* optselect = knapsack01(profit,weight,n,maxw);
    for(i=0;i<n;i++){
        if(optselect[i] == 1)
            printf("Item %d was included in knapsack\n",i+1);
        else
            printf("Item %d was not included in knapsack\n",i+1);
            
        
    }
    return 0;

}

