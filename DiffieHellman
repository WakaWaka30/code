#include <stdio.h>
#include <stdlib.h>

int powermod(int p, int b, int m){
    int i=0;
    int z = 1;
    for(i=0;i<p;i++){
        
        z = b*z;
        z = z%m;
        
    }
    return z;
        
}


int CheckASE(int *ptr1, int n){
    int i=0,j=0,count=0;
    for(i=1;i<n;i++)
        if(*(ptr1+i) == 0)
            break;
    if(i!=n)
        return 0;
    else{    
        for(i=1;i<n;i++){
            for(j=1;j<n;j++){
                if(*(ptr1+i) == *(ptr1+j)){
                    count++;
                    if(count>1)
                        break;
                    
                }
            }
            count=0;
            if(j!=n)
                break;
        }
        if(i!=n)
            return 0;
        else 
            return 1;
    }
        
        
}
int* FindPR(int n){
    int i=0,j=0;
    int *ptr;
    int *ptr1;
    ptr = (int*)malloc(n*sizeof(int));
    ptr1 = (int*)malloc(n*sizeof(int));
    int k=1;
    for(i=1;i<n;i++){
        for(j=1;j<=n-1;j++){
            *(ptr1+j) = powermod(j,i,n);
            //printf("%d--%d--%d (mod %d)\n",i,j,powermod(i,j,n),n);
        }
        //printf("\n");
        if(CheckASE(ptr1,n) == 1){
            *(ptr+k)=i;
            k++;
        }
        else 
            continue;
    }
    *ptr = k;
    return ptr;
}

int CheckPrime(int n){
    int i=0;
    for(i=2;i<=n/2;i++)
        if(n%i == 0)
            break;
    if(i == (n/2)+1)
        return 1;
    else    
        return 0;
}   

int PrimCheck(int n, int a){
    int i=0;
    int *p;
    p = (int*)malloc(n*sizeof(int));
    for(i=1;i<n;i++)
        *(p+i) = powermod(i,a,n);
    int res = CheckASE(p,n);    
    
    return res;        
        
}
int main(){
    int p,b,m,i=0,a,x;
    printf("Enter a prime number: ");
    scanf("%d",&p);
    if(CheckPrime(p) == 1){
        int *ptr = FindPR(p);
        int k = *ptr;
        printf("Number of primitive roots for %d are: %d\nAll primitive roots of %d are:-\n",p,k-1,p);
        for(i=1;i<k;i++)
            printf("%d\n",*(ptr+i));
        printf("Press 1 to choose a primitive root\nPress any other key to randomly pick a primitive root: ");
        scanf("%d",&b);
        if(b == 1){
            printf("Press 1 to give index value to input primitive root (eg. input 1 to get %d as primitive root or input 4 to get %d as primitive root)\n",*(ptr+1),*(ptr+4));
            printf("Press any other key to input the primitive root: ");
            scanf("%d",&x);
            if(x == 1){
                printf("Enter the index value starting from 1: ");
                scanf("%d",&m);
                if(m>k-1){
                    printf("%d exceeds number of primitive roots",m);
                    return 0;
                }
                else
                    a = *(ptr+m);
                
            }   
                
                
            else{
                printf("Enter the value for primitive root choosen from the values displayed above: ");
                scanf("%d",&m);
                if(PrimCheck(p,m) == 1)
                    a=m;
                else{
                    printf("%d is not a primitive root of %d",m,p);
                    return 0;
                }
            }
                
            
        }
        else{
            int s = (rand())%(k-1)+1;
            a = *(ptr+s);
            
        }
        printf("%d was choosen as the primitive root\n",a);
        int xa,xb,ya,yb,ka,kb;
        printf("Enter private key less than %d for Alice: ",p);
        scanf("%d",&xa);
        if(xa>p){
            printf("Error: Private key greater than %d",p);
            return 0;
        }
        ya = powermod(xa,a,p);
        
        printf("%d is the public key for Alice\n",ya);
        printf("Enter private key less than %d for Bob: ",p);
        scanf("%d",&xb);
        if(xb>p){
            printf("Error: Private key greater than %d",p);
            return 0;
        }
        yb = powermod(xb,a,p);
        printf("%d is the public key for Bob\n",yb);
        ka = powermod(xa,yb,p);
        printf("Key on Alice's side = %d\n",ka);
        
        kb = powermod(xb,ya,p);
        printf("Key on Bob's side = %d\n\n",kb);
        
        if(ka == kb)
            printf("Diffie-Hellman Key Exchange was successful");
        else
            printf("Diffie-Hellman Key Exchange was unsuccessful");
        
    }
    else
        printf("Error: %d is not prime",p);
    return 0;    
        
}
