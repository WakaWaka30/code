#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


int CheckKey(char **keymat, char c, int x, int y){
    int i=0,j=0;
    
    for(i=0;i<x+1;i++){
        for(j=0;j<5;j++){
            
            if(*(*(keymat+i)+j) == c)
                break;
            else if(i == x && j == y)
                break;
            
        }
        if(*(*(keymat+i)+j) == c)
            break;
        else if(i == x && j == y)
            break;
        
    }
    if(i!=x || j != y)
        return 0;
    else
        return 1;
    
}

char** KeyMatGen(char *key1){
    char** keymat;
    char* key;
    int i=0,j=0,count=0,l,k,c2=0;
    keymat = (char**)malloc(5*sizeof(char*));
    for(i=0;i<5;i++)
        *(keymat+i) = (char*)malloc(5*sizeof(char));
    for(i=0;i<strlen(key1);i++){
        if(*(key1+i) == 'J')
                count++;
        for(j=0;j<strlen(key1);j++)
            if(*(key1+i) == *(key1+j))
                count++;
    }        
    
    if(count == strlen(key1)){
        key = (char*)malloc(strlen(key1)*sizeof(char));
        for(i=0;i<strlen(key1);i++)
            *(key+i) = *(key1+i);
        l = strlen(key);    
    }
    else{
        k=0;
        int c1=0;
        key = (char*)malloc((strlen(key1)*sizeof(char)));
        for(i=0;i<strlen(key1);i++){
            if(*(key1+i) != 'J'){
                c1=0;
                for(j=0;j<strlen(key1);j++)
                    if(*(key1+i) == *(key1+j) && i>j)
                        c1++;
                    
                        
                        
                //printf("%d\n",c1);    
                if(c1>0)
                    continue;
                else{
                    *(key+k) = *(key1+i);
                    k++;
                }
                    
                
            
            }
            
            else  
                continue;
            
        }
        
        l = strlen(key);
    }        
    printf("Modified Key: %s\n",key);
    int r;
    int c = l%5;
    if(l%5 != 0)
        r = (l/5)+1;
    else
        r = l/5;
    char ch;
    k=0;
    //printf("%d--%d\n",r,c);
    for(i=0;i<r;i++)
        for(j=0;j<5;j++){
            *(*(keymat+i)+j) = *(key+k);
            //printf("%c\n",*(*(keymat+i)+j));
            k++;
        }
    
    
    k=65;
    int t;
    if(strlen(key) == 5)
        t = r;
    else
        t = r-1;
    for(i=t;i<5;i++){
        
        
        if(i == r-1){
            
            for(j=c;j<5;j++)
            
                while(1){
                
                    ch = (char)k;
                    if(ch == 'J')
                        k++;
                    else if(CheckKey(keymat,ch,i,j) == 1){
                        *(*(keymat+i)+j) = ch;
                        break;
                    }
                    else
                        k++;
                }
            
            
        }
        
        else{
            
            for(j=0;j<5;j++){
                while(1){
                    ch = (char)k;
                    if(ch == 'J')
                        k++;
                    else if(CheckKey(keymat,ch,i,j) == 1){
                        *(*(keymat+i)+j) = ch;
                        break;
                    }
                    else
                        k++;
                }
            
            }
            
        }
    }
    return keymat;        
            
    
}

int* FindinKM(char **keymat, char c1, char c2){
    int i=0,j=0, *p;
    for(i=0;i<5;i++)
        for(j=0;j<5;j++)
            if(*(*(keymat+i)+j) == c1)
                break;
    *p = i;
    *(p+1) = j;
    
    for(i=0;i<5;i++)
        for(j=0;j<5;j++)
            if(*(*(keymat+i)+j) == c2)
                break;
                
    *(p+2) = i;
    *(p+3) = j;            
    return p;
}

char* ModifyPT(char* plaintext){// Segmentation Fault
    int i=0,j=0,count=0;
    int l = strlen(plaintext);
    for(i=0;i<l;i++){
        
    
        if(plaintext[i] == plaintext[i+1])
            count++;
            
        
    char *newPT = (char*)malloc((l+count+1)*sizeof(char));
    j=0;
    for(i=0;i<l;i++){
        
        newPT[j] = plaintext[i];
        if(plaintext[i] == plaintext[i+1]){
            newPT[j+1] = 'X';
            j=j+2;
        }
        else
            j++;
    }
    if (strlen(newPT)%2 != 0)
        newPT[l+count] = 'X';
    
    return newPT;    
        
}

char* PlayFairEncrypt(char **keymat, char *plaintext){
    int i=0,j=0,i1,j1,i2,j2,*p;
    int l = strlen(plaintext);
    char *newPT;
    if(l%2 != 0){
        newPT = (char*)malloc((l+1)*sizeof(char));
        newPT[l] = 'X';
        l=l+1;
    }
    else
        newPT = (char*)malloc(l*sizeof(char));
    
    char *cipher = (char*)malloc(strlen(newPT)*sizeof(char));
    for(i=0;i<l;i++)
            newPT[i] = plaintext[i];
    
    for(i=0;i<l;i=i+2){
        p = FindinKM(keymat,newPT[i],newPT[i+1]);
        i1 = *p;
        j1 = *(p+1);
        i2 = *(p+2);
        j2 = *(p+3);
        
        if(i1 == i2){
            cipher[i] = *(*(keymat+i1)+(j1-1)%5);
            cipher[i+1] = *(*(keymat+i1)+(j1-1)%5);
        
        }
    }       
    
    
}

int main(){
    char k[100];
    char* pt;
    printf("Enter key: ");
    scanf("%s",k);
    int len = strlen(k);
    char* key1 = (char*)malloc(len*sizeof(char));
    int i=0,j=0;
    for(i=0;*(k+i)!='\0';i++)
        *(key1+i) = toupper(*(k+i));
    char** keyMat = KeyMatGen(key1);
    for(i=0;i<5;i++){
        for(j=0;j<5;j++)
            printf("%c\t",*(*(keyMat+i)+j));
        printf("\n");
    }
    printf("Enter plaintext: ");
    
    scanf("%s",pt);
    pt = ModifyPT(pt);
    printf("Modified Plaintext: %s",pt);
    return 0;
}
