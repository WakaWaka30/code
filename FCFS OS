#include <stdio.h>
#include <stdlib.h>
#define INF 1000000

int* Sort(int* A, int n){
    int* B = (int*)malloc(n*sizeof(int));
    int* C = (int*)malloc(n*sizeof(int));
    int min=INF,i=0,j=0,minid;
    for(i=0;i<n;i++)
            B[i] = A[i];
    
    while(j<n){
        min = INF;
        for(i=0;i<n;i++)
            if(min>B[i]){
                min = B[i];
                minid = i;
            }
                
        C[j] = A[minid];
        B[minid] = INF;
        j++;
    }
        
    return C;    
            
}
void FCFS(int* processid, int* AT, int* BT, int n){
    int i=0,j=0,minid=0,sumtime=0,min=INF,d;
    int* CT = (int*)malloc(n*sizeof(int));
    int* TAT = (int*)malloc(n*sizeof(int));
    int* WT = (int*)malloc(n*sizeof(int));
    int* RT = (int*)malloc(n*sizeof(int));
    int* AT1 = (int*)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        AT1[i] = AT[i];
    i=0;
    while(i<n){
        min=INF;
        for(j=0;j<n;j++)
            if(min>AT1[j]){
                min = AT1[j];
                minid = j;
            }
        
        if(AT1[minid]>sumtime){
            RT[minid] = sumtime-AT1[minid];
            if(RT[minid]<0)
                RT[minid] = 0;
            d = AT[minid]-sumtime;
            sumtime = sumtime+d+BT[minid];
            CT[minid] = sumtime;
            TAT[minid] = CT[minid]-AT1[minid];
            WT[minid] = TAT[minid] - BT[minid];
           
        }
        else{
            RT[minid] = sumtime-AT1[minid];
            if(RT[minid]<0)
                RT[minid] = 0;
            sumtime = sumtime + BT[minid];
            CT[minid] = sumtime;
            TAT[minid] = CT[minid]-AT1[minid];
            WT[minid] = TAT[minid] - BT[minid];
        }
        
        
        AT1[minid] = INF;
        
            
        i++;
        
        
    }
    printf("PID\tAT\tBT\tCT\tTAT\tWT\tRT\n");
    for(i=0;i<n;i++)
        printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\n",processid[i],AT[i],BT[i],CT[i],TAT[i],WT[i],RT[i]);
    float avgTAT=0;
    for(i=0;i<n;i++)
        avgTAT = avgTAT + (float)TAT[i];
    avgTAT = avgTAT/n;
    
    float avgWT=0;
    for(i=0;i<n;i++)
        avgWT = avgWT + (float)WT[i];
    avgWT = avgWT/n;
    
    printf("\nAverage Turnaround Time: %.2f\n",avgTAT);
    printf("Average Waiting Time: %.2f",avgWT);
    
}
int main(){
    int n,i=0;
    printf("Enter number of processes: ");
    scanf("%d",&n);
    int* processid = (int*)malloc(n*sizeof(int));
    int* AT = (int*)malloc(n*sizeof(int));
    int* BT = (int*)malloc(n*sizeof(int));
    
    printf("Process IDs are alloted to each process:-\nProcess ID\n");
    for(i=0;i<n;i++){
        *(processid+i) = i+1;
        printf("P%d\n",processid[i]);
    }
    printf("Input Arrival Time for each process:-\n");
    for(i=0;i<n;i++){
        printf("Enter Arrival Time for Process ID %d: ",i+1);
        scanf("%d",(AT+i));
    }
    
    int* AT1 = Sort(AT,n);
    
    printf("Input Burst Time for each process:-\n");
    for(i=0;i<n;i++){
        printf("Enter Burst Time for Process ID %d: ",i+1);
        scanf("%d",(BT+i));
    }
    printf("\nPID: Process ID\nAT: Arrival Time\nBT: Burst TIme\nCT: Completion Time\nTAT: Turnaround TIme\nWT: Waiting TIme\nRT: Response TIme\n\n");
    FCFS(processid,AT1,BT,n);
    return 0;
        

}
