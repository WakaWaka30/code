/*C program for calculating the number of Armstrong numbers, 
listing all of those primes and finding their sum between 
given two numbers acting as range (both inclusive)


Definition: An Armstrong number is a number such that if it 
has n digits then sum of all of its digits, each raised to the 
power n gives the output which is equal to the number itself.*/

#include <stdio.h>
#include<math.h>
int checkArmstrong(int n){
    int a,b,sum=0,count1=0;
    a=n;
    b=n;
    if(n>0 && n<11)
        return 0;
        
    else if(n==0||n==1)
        return 1;
    else{
        while(1){
            count1 = count1 + 1;
            a = a/10;
            if(a<1)
                break;
        }
        while(1){
            sum = sum + pow((n%10),count1);
            n = n/10;
            if(n<1)
                break;
        }
        if(sum == b)
            return 1;
        else
            return 0;
    }
    
}

int main()
{
    int a,b,count=0,sum=0,i=0;
    printf("Enter two numbers: ");
    scanf("%d %d",&a,&b);
    if(a<0 || b<0){
        printf("Error: Negative values are given as input\n\n");
        return main();
    }
    if(a>b){
        printf("Error: Upper bound is lesser than Lower bound\n\n");
        return main();
    }
    printf("Armstrong numbers between %d and %d are:-\n",a,b);
    for(i=a;i<=b;i++){
        if(checkArmstrong(i) == 1){
            count = count + 1;
            sum = sum + i;
            printf("%d\n",i);
        }
    }
    if(count == 0){
        printf("none");
        return 0;
    }
    else{
        printf("There are %d Armstrong numbers between %d and %d(both inclusive)\n",count,a,b);
        printf("The sum of Armstrong numbers between %d and %d(both inclusive) is %d",a,b,sum);
        return 0;
    }
}
