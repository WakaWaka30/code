#include <stdio.h>
#include <stdlib.h>

int powermod(int p, int b, int m){
    int i=0;
    int z = 1;
    for(i=0;i<p;i++){
        
        z = b*z;
        z = z%m;
        
    }
    return z;
        
}


int CheckASE(int *ptr1, int n){
    int i=0,j=0,count=0;
    for(i=1;i<n;i++)
        if(*(ptr1+i) == 0)
            break;
    if(i!=n)
        return 0;
    else{    
        for(i=1;i<n;i++){
            for(j=1;j<n;j++){
                if(*(ptr1+i) == *(ptr1+j)){
                    count++;
                    if(count>1)
                        break;
                    
                }
            }
            count=0;
            if(j!=n)
                break;
        }
        if(i!=n)
            return 0;
        else 
            return 1;
    }
        
        
}
int* FindPR(int n){
    int i=0,j=0;
    int *ptr;
    int *ptr1;
    ptr = (int*)malloc(n*sizeof(int));
    ptr1 = (int*)malloc(n*sizeof(int));
    int k=1;
    for(i=1;i<n;i++){
        for(j=1;j<=n-1;j++){
            *(ptr1+j) = powermod(j,i,n);
            //printf("%d--%d--%d (mod %d)\n",i,j,powermod(i,j,n),n);
        }
        //printf("\n");
        if(CheckASE(ptr1,n) == 1){
            *(ptr+k)=i;
            k++;
        }
        else 
            continue;
    }
    *ptr = k;
    return ptr;
}

int CheckPrime(int n){
    int i=0;
    for(i=2;i<=n/2;i++)
        if(n%i == 0)
            break;
    if(i == (n/2)+1)
        return 1;
    else    
        return 0;
}   

int main(){
    int p,b,m,i=0;
    printf("Enter number: ");
    scanf("%d",&p);
    if(CheckPrime(p) == 1){
        int *ptr = FindPR(p);
        int k = *ptr;
        printf("Number of primitive roots for %d are: %d\nAll primitive roots of %d are:-\n",p,k-1,p);
        for(i=1;i<k;i++)
            printf("%d\n",*(ptr+i));
    }
    else
        printf("Primitive roots do not exist for composite numbers");
    return 0;    
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
