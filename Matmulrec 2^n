#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int*** SubMat(int** mat, int n){
    int i=0,j=0,k1=0,k2=0;
    int** submat1 = (int**)malloc((n/2)*sizeof(int*));
    for(i=0;i<n/2;i++)
        *(submat1+i) = (int*)malloc((n/2)*sizeof(int));
    int** submat2 = (int**)malloc((n/2)*sizeof(int*));
    for(i=0;i<n/2;i++)
        *(submat2+i) = (int*)malloc((n/2)*sizeof(int));
    int** submat3 = (int**)malloc((n/2)*sizeof(int*));
    for(i=0;i<n/2;i++)
        *(submat3+i) = (int*)malloc((n/2)*sizeof(int));
                
    int** submat4 = (int**)malloc((n/2)*sizeof(int*));
    for(i=0;i<n/2;i++)
        *(submat4+i) = (int*)malloc((n/2)*sizeof(int));
        
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
        if((i>=0 && i<n/2) && (j>=0 && j<n/2))
            submat1[i][j] = mat[i][j];
        else if((i>=0 && i<n/2) && (j>=n/2 && j<n)) 
            submat2[i%(n/2)][j%(n/2)] = mat[i][j];
            
        else if((i>=n/2 && i<n) && (j>=0 && j<n/2))
            submat3[i%(n/2)][j%(n/2)] = mat[i][j];
        else
            submat4[i%(n/2)][j%(n/2)] = mat[i][j];    
        }
    
    int*** res = (int***)malloc(4*sizeof(int**));
    *res = submat1;
    *(res+1) = submat2;
    *(res+2) = submat3;
    *(res+3) = submat4;
    
    return res;
    
}

void matinp(int** mat, int n){
    
    int i=0,j=0;
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            printf("Enter element in (%d,%d) cell: ",i+1,j+1);
            scanf("%d",&mat[i][j]);
        }
        
        
        
            
}

void display(int** mat, int n){
    int i=0,j=0;
    
    for(i=0;i<n;i++){
        for(j=0;j<n;j++)
            printf("%d\t",mat[i][j]);
            
    
    printf("\n");
    }
}

int** matadd(int** mat1, int** mat2, int n){
    int i=0,j=0;
    int** mat3 = (int**)malloc(n*sizeof(int*));
    
    for(i=0;i<n;i++)
        *(mat3+i) = (int*)malloc(n*sizeof(int));
    
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            mat3[i][j] = mat1[i][j] + mat2[i][j];
            
    return mat3;        
}

int** matcombine(int*** res,int n){
    int i=0,j=0;
    int** submat1 = (int**)malloc((n/2)*sizeof(int*));
    for(i=0;i<n/2;i++)
        *(submat1+i) = (int*)malloc((n/2)*sizeof(int));
    int** submat2 = (int**)malloc((n/2)*sizeof(int*));
    for(i=0;i<n/2;i++)
        *(submat2+i) = (int*)malloc((n/2)*sizeof(int));
    int** submat3 = (int**)malloc((n/2)*sizeof(int*));
    for(i=0;i<n/2;i++)
        *(submat3+i) = (int*)malloc((n/2)*sizeof(int));
                
    int** submat4 = (int**)malloc((n/2)*sizeof(int*));
    for(i=0;i<n/2;i++)
        *(submat4+i) = (int*)malloc((n/2)*sizeof(int));
    int** mat = (int**)malloc(n*sizeof(int*));
    submat1 = *res;
    submat2 = *(res+1);
    submat3 = *(res+2);
    submat4 = *(res+3);
    
    for(i=0;i<n;i++)
        *(mat+i) = (int*)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            if((i>=0 && i<n/2) && (j>=0 && j<n/2))
                mat[i][j] = submat1[i][j];
            else if((i>=0 && i<n/2) && (j>=n/2 && j<n)) 
                mat[i][j] = submat2[i%(n/2)][j%(n/2)];
            
            else if((i>=n/2 && i<n) && (j>=0 && j<n/2))
                mat[i][j] = submat3[i%(n/2)][j%(n/2)];
            else
                mat[i][j] = submat4[i%(n/2)][j%(n/2)];   
            
        }
    return mat;    
    
}

int** matmulrec(int** mat1, int** mat2, int n){
    int** mat3 = (int**)malloc(n*sizeof(int*));
    int i=0;
    for(i=0;i<n;i++)
        *(mat3+i) = (int*)malloc(n*sizeof(int));
    
    if(n == 2){
        mat3[0][0] = mat1[0][0]*mat2[0][0]+mat1[0][1]*mat2[1][0];
        mat3[0][1] = mat1[0][0]*mat2[0][1]+mat1[0][1]*mat2[1][1];
        mat3[1][0] = mat1[1][0]*mat2[0][0]+mat1[1][1]*mat2[1][0];
        mat3[1][1] = mat1[1][0]*mat2[0][1]+mat1[1][1]*mat2[1][1];
        
    
    }
    
    else{
        
        int*** res1 = SubMat(mat1,n);
        int*** res2 = SubMat(mat2,n);
        int*** res3 = (int***)malloc(4*sizeof(int**));
        
        *res3 = matadd(matmulrec(*res1, *res2, n/2),matmulrec(*(res1+1),*(res2+2),n/2),n/2);
        *(res3+1) = matadd(matmulrec(*res1, *(res2+1), n/2),matmulrec(*(res1+1),*(res2+3),n/2),n/2);
        *(res3+2) = matadd(matmulrec(*(res1+2), *res2, n/2),matmulrec(*(res1+3),*(res2+2),n/2),n/2);
        *(res3+3) = matadd(matmulrec(*(res1+2), *(res2+1), n/2),matmulrec(*(res1+3),*(res2+3),n/2),n/2);
        
        mat3 = matcombine(res3,n);
    }
    return mat3;
    
}

int main(){
    printf("Enter order of matrix in power of 2: ");
    int n,k=0;
    scanf("%d",&n);
    double x = log(n)/log(2);
    if(x-(int)x != 0){
        printf("%d is not in power of 2",n);
        return 0;
    }
    
    int** matA = (int**)malloc(n*sizeof(int));
    for(k=0;k<n;k++)
        *(matA+k) = (int*)malloc(n*sizeof(int));
    int** matB = (int**)malloc(n*sizeof(int));
    for(k=0;k<n;k++)
        *(matB+k) = (int*)malloc(n*sizeof(int));   
        
    printf("Enter element in matrix A:-\n");
    matinp(matA,n);
    printf("Inputted matrix A is:-\n");
    display(matA,n);
    printf("\n");
    printf("Enter element in matrix B:-\n");
    matinp(matB,n);
    printf("Inputted matrix B is:-\n");
    display(matB,n);
    
    int** matC = matmulrec(matA,matB,n);
    
    printf("Product of matricies, AxB is C:-\n");
    display(matC,n);
    
    /*printf("\n");
    int*** res1 = SubMat(mat,n);
    for(k=0;k<4;k++){
        printf("Submatrix %d:-\n",k+1);
        display(*(res1+k),n/2);
        printf("\n");
    }
    
    printf("Matrix formed by combining submatrices is:-\n");
    int** mat1 = matcombine(res1,n);
    display(mat1,n);*/
    return 0;
}
