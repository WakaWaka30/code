#include <stdio.h>

int Partition(int* A, int low, int high){
    int i=low,j=high,pivot=low,temp;
    while(i<j){
        while(1){
            i++;
            if(A[i]>A[pivot])
                break;
        }
            
        while(1){
            
            if(j == high && A[j]<=A[pivot])
                break;
            
            
            j--;
            if(A[j]<=A[pivot])
                break;
        }
        if(i<j){
            temp = A[i];
            A[i] = A[j];
            A[j] = temp;
        }
        
            
    }
    temp = A[pivot];
    A[pivot] = A[j];
    A[j] = temp;
    
    return j;
    
}

void QuickSort(int* A, int low, int high){
    int P;
    if(low<high){
        P = Partition(A,low,high);
        QuickSort(A,low,P-1); //It was changed from P to P-1 because in case a scenario comes where after j-- A[j] = A[pivot] then in after next partition again A[j] = A[pivot]as previous pivot P was included again, so this would lead to an infinite recursion, hence we discard P in next recursion so as to avoid this infinite recursion error
        QuickSort(A,P+1,high);
    }
}

void PrintArray(int* A, int n){
    int i=0;
    printf("{");
    for(i=0;i<n;i++){
        if(i!=n-1)
            printf("%d, ",A[i]);
        else
            printf("%d}",A[i]);
    }
    
}

int main(){
    int n,i=0;
    printf("Enter size of array: ");
    scanf("%d",&n);
    int num[n];
    for(i=0;i<n;i++){
        printf("Enter %dth element of the array: ",i+1);
        scanf("%d",&num[i]);
    }
    
    printf("The given array is:-\n");
    PrintArray(num,n);
    printf("\n");
    QuickSort(num,0,n-1);
    printf("The sorted array is:-\n");
    PrintArray(num,n);
    return 0;

    
}
