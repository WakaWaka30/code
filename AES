#include <stdio.h>
#include <inttypes.h>
#include <string.h>
#include <stdlib.h>
#include<math.h>
#define ROTL8(x,shift) ((uint8_t) ((x) << (shift)) | ((x) >> (8 - (shift))))



uint8_t*** StateArraysGenerator(char* str){
    
    uint8_t padding[4][4] = {{0,0,0,0},
                     {0,0,0,0},
                     {0,0,0,0},
                     {0,0,0,0}};
    int i=0,j=0,k=0;                 
    int l = strlen(str);
    int pad = l%16;
    int blocks = l/16;
    uint8_t*** as = (uint8_t***)malloc((blocks+1)*sizeof(uint8_t**));
    for(i=0;i<blocks+1;i++){
        as[i] = (uint8_t**)malloc(4*sizeof(uint8_t*));
        for(j=0;j<4;j++)
            as[i][j] = (uint8_t*)malloc(4*sizeof(uint8_t));
    }
    int k1=0;
    if(pad == 0){
        for(i=0;i<4;i++)
            for(j=0;j<4;j++)
                as[blocks][i][j] = padding[i][j];
        i=0;
        j=0;
        k=0;
        
        while(i<blocks+1){
            for(j=0;j<4;j++){
                for(k=0;k<4 && str[k1] != '\0';k++){
                    as[i][j][k] = str[k1];
                    k1++;
             
                }
                if(str[k1] == '\0')
                    break;
            }
                
            i++;    
        }        
    }
    
    else{
        i=0;
        j=0;
        k=0;
        
        while(i<blocks+1){
            for(j=0;j<4;j++){
                for(k=0;k<4 && str[k1] != '\0';k++){
                    as[i][j][k] = str[k1];
                    k1++;
             
                }
                if(str[k1] == '\0')
                    break;
            }
                
            i++;    
        }
        
        as[blocks][j][k] = 0x80;
        
    }
    uint8_t*** as1 = (uint8_t***)malloc((blocks+1)*sizeof(uint8_t**));
    for(i=0;i<blocks+1;i++){
        as1[i] = (uint8_t**)malloc(4*sizeof(uint8_t*));
        for(j=0;j<4;j++)
            as1[i][j] = (uint8_t*)malloc(4*sizeof(uint8_t));
    }
    for(i=0;i<blocks+1;i++)
        for(j=0;j<4;j++)
            for(k=0;k<4;k++)
                as1[i][j][k] = as[i][k][j];
    return as1;
      
}


char* toString(uint8_t*** as, int blocks, int pad){
    
    int l = blocks*16 + pad;
    char* str = (char*)malloc(l*sizeof(char));
    
    int i=0,j=0,k=0,k1=0;
    
    for(i=0;i<blocks+1;i++)
        for(j=0;j<4;j++){
            for(k=0;k<4 && k1 != l;k++)
                if(as[i][k][j] != 0x80){    
                    str[k1] = (char)as[i][k][j];
                    k1++;
                }
            
            if(k1 >= l)
                break;
        }
    return str;
}

uint8_t** initialize_aes_sbox() {
	
	uint8_t* sbox = (uint8_t*)malloc(256*sizeof(uint8_t));
	
	uint8_t p = 1, q = 1;
	
	
	do {
		
		p = p ^ (p << 1) ^ (p & 0x80 ? 0x1B : 0);

		
		q ^= q << 1;
		q ^= q << 2;
		q ^= q << 4;
		q ^= q & 0x80 ? 0x09 : 0;

		
		uint8_t xformed = q ^ ROTL8(q, 1) ^ ROTL8(q, 2) ^ ROTL8(q, 3) ^ ROTL8(q, 4);

		sbox[p] = xformed ^ 0x63;
	} while (p != 1);

	
	sbox[0] = 0x63;
	
	uint8_t** sbox1 = (uint8_t**)malloc(16*sizeof(uint8_t*));
	int i=0,j=0;
	for(i=0;i<16;i++)
	    sbox1[i] = (uint8_t*)malloc(16*sizeof(uint8_t));
	int k1=0;    
	for(i=0;i<16;i++)
	    for(j=0;j<16;j++){
	        sbox1[i][j] = sbox[k1];
	        k1++;
	    }
	return sbox1;    
}
uint8_t** KeyGenerator(uint8_t** key, int roundval){
    int i=0,j=0;
    uint8_t** reskey = (uint8_t**)malloc(4*sizeof(uint8_t*));
    for(i=0;i<4;i++)
        reskey[i] = (uint8_t*)malloc(4*sizeof(uint8_t));
        
    if(roundval == 0)
        reskey = key;
    
    else{
        
        uint8_t* g = (uint8_t*)malloc(4*sizeof(uint8_t));
        
        for(i=0;i<4;i++)
            g[i] = key[i][3];
        
        int temp1, temp2;
        
        temp1 = g[0];
        
        g[0] = g[1];
        
        temp2 = g[3];
        
        g[3] = temp1;
        
        g[1] = g[2];
        
        g[2] = temp2;
        //printf("\n%X %X %X %X\n",g[0],g[1],g[2],g[3]);
        uint8_t** sbox = initialize_aes_sbox();
        
        for(i=0;i<4;i++)
            g[i] = sbox[g[i]/16][g[i]%16];
        //printf("\n%X %X %X %X\n",g[0],g[1],g[2],g[3]);
        uint8_t* rv = (uint8_t*)malloc(10*sizeof(uint8_t));
        
        rv[0] = 0x01;
        rv[1] = 0x02;
        rv[2] = 0x04;
        rv[3] = 0x08;
        rv[4] = 0x10;
        rv[5] = 0x20;
        rv[6] = 0x40;
        rv[7] = 0x80;
        rv[8] = 0x1B;
        rv[9] = 0x36;
        
        g[0] = rv[roundval-1]^g[0];
        
        g[1] = 0x00^g[1];
        
        g[2] = 0x00^g[2];    
         
        g[3] = 0x00^g[3]; 
        
        for(i=0;i<4;i++)
            reskey[i][0] = key[i][0] ^ g[i];
            
        for(i=0;i<4;i++)
            reskey[i][1] = key[i][1] ^ reskey[i][0];
        for(i=0;i<4;i++)
            reskey[i][2] = key[i][2] ^ reskey[i][1];
        for(i=0;i<4;i++)
            reskey[i][3] = key[i][3] ^ reskey[i][2];    
        
            
        
    }    
    
    return reskey;
    
}

uint8_t*** AddRoundKey(uint8_t*** sa, uint8_t** key, int blocks){
    
    int i=0,j=0,k=0;
    
    for(i=0;i<blocks+1;i++){
        for(j=0;j<4;j++)
            for(k=0;k<4;k++)
                sa[i][j][k] = sa[i][j][k]^key[j][k];
                
    }
    
    return sa;
    
}

uint8_t*** SubBytes(uint8_t*** sa, int blocks){
    
    uint8_t** sbox = initialize_aes_sbox();
    int i=0,j=0,k=0;
    uint8_t x;
    for(i=0;i<blocks+1;i++){
        for(j=0;j<4;j++)
            for(k=0;k<4;k++){
                x = sa[i][j][k];
                sa[i][j][k] = sbox[x/16][x%16];
            }
                
    }
    
    return sa;
    
}

uint8_t* CLS(uint8_t* g){
    
     int temp1, temp2;
        
        temp1 = g[0];
        
        g[0] = g[1];
        
        temp2 = g[3];
        
        g[3] = temp1;
        
        g[1] = g[2];
        
        g[2] = temp2;
            
    return g;
    
}

uint8_t*** ShiftRows(uint8_t*** sa, int blocks){
    int i=0,j=0,k=0;
    
    for(i=0;i<blocks+1;i++)
        for(j=1;j<4;j++){    
            k=0;
            while(1){
                sa[i][j] = CLS(sa[i][j]);
                k++;
                if(j == k)
                    break;
            }
        }
        
    return sa;    
    
}
uint8_t mixcolmul(uint8_t A, uint8_t B){
    int i=0,j=0;
    int* bin1 = (int*)malloc(8*sizeof(int));
    int* bin2 = (int*)malloc(8*sizeof(int));
    uint8_t A1 = A, B1 = B;
    for(i=0;i<8;i++){
        bin1[i] = A1%2;
        bin2[i] = B1%2;
        A1 = A1/2;
        B1 = B1/2;
    }
    
    int* prod = (int*)malloc(15*sizeof(int));
 
   
    for(i=0;i<15;i++)
        prod[i] = 0;
 
   
 
   
   for(i=0;i<8;i++)
   {
     
     for(j=0;j<8;j++)
         prod[i+j] += bin1[i]*bin2[j];
   }
   
   for(i=0;i<15;i++){
       if(prod[i]%2 == 0)
            prod[i] = 0;
        else
            prod[i] = 1;
   }
   
   int res=0;
      
   for(i=0;i<15;i++)
        res = res + prod[i]*pow(2,i);
   
   
    while(1){
        res = res^283;
        if(res<256)
            break;
    }
    
    uint8_t res1 = res;
    
    return res1;
    
}

uint8_t** mixcol(uint8_t** sm){
    
    uint8_t mcm[4][4];
    
    mcm[0][0] = 0x02;
    mcm[0][1] = 0x03;
    mcm[0][2] = 0x01;
    mcm[0][3] = 0x01;
    mcm[1][0] = 0x01;
    mcm[1][1] = 0x02;
    mcm[1][2] = 0x03;
    mcm[1][3] = 0x01;
    mcm[2][0] = 0x01;
    mcm[2][1] = 0x01;
    mcm[2][2] = 0x02;
    mcm[2][3] = 0x03;
    mcm[3][0] = 0x03;
    mcm[3][1] = 0x01;
    mcm[3][2] = 0x01;
    mcm[3][3] = 0x02;
    
    int i=0,j=0,k=0;
    
    uint8_t** resmat = (uint8_t**)malloc(4*sizeof(uint8_t*));
    
    for(i=0;i<4;i++)
        resmat[i] = (uint8_t*)malloc(4*sizeof(uint8_t));
    
    for(i=0;i<4;i++)
        for(j=0;j<4;j++)
            resmat[i][j] = 0;
    
        
    for(i=0;i<4;i++)
        for(j=0;j<4;j++)
            for(k=0;k<4;k++)
                resmat[i][j] = resmat[i][j]^mixcolmul(sm[k][j],mcm[i][k]);
            
                
    return resmat;    
        
    
    
    
    
    
    
}

uint8_t** invmixcol(uint8_t** sm){
    
    uint8_t mcm[4][4];
    
    mcm[0][0] = 0x0e;
    mcm[0][1] = 0x0b;
    mcm[0][2] = 0x0d;
    mcm[0][3] = 0x09;
    mcm[1][0] = 0x09;
    mcm[1][1] = 0x0e;
    mcm[1][2] = 0x0b;
    mcm[1][3] = 0x0d;
    mcm[2][0] = 0x0d;
    mcm[2][1] = 0x09;
    mcm[2][2] = 0x0e;
    mcm[2][3] = 0x0b;
    mcm[3][0] = 0x0b;
    mcm[3][1] = 0x0d;
    mcm[3][2] = 0x09;
    mcm[3][3] = 0x0e;
    
    int i=0,j=0,k=0;
    
    uint8_t** resmat = (uint8_t**)malloc(4*sizeof(uint8_t*));
    
    for(i=0;i<4;i++)
        resmat[i] = (uint8_t*)malloc(4*sizeof(uint8_t));
    
    for(i=0;i<4;i++)
        for(j=0;j<4;j++)
            resmat[i][j] = 0;
    
        
    for(i=0;i<4;i++)
        for(j=0;j<4;j++)
            for(k=0;k<4;k++)
                resmat[i][j] = resmat[i][j]^mixcolmul(sm[k][j],mcm[i][k]);
            
                
    return resmat;    
        
    
    
    
    
    
    
}

uint8_t*** MixColumns(uint8_t*** sa, int blocks){
    
    int i=0;
    
    for(i=0;i<blocks+1;i++)
        sa[i] = mixcol(sa[i]);
    
    return sa;    
    
}

uint8_t*** InverseMixColumns(uint8_t*** sa, int blocks){
    
    int i=0;
    
    for(i=0;i<blocks+1;i++)
        sa[i] = invmixcol(sa[i]);
    
    return sa;    
    
}

uint8_t*** AESEncrypt(uint8_t*** sa, int blocks, uint8_t** key){
    
    
    
    uint8_t** reskey = KeyGenerator(key,0);
    sa = AddRoundKey(sa,reskey,blocks);
    int roundval = 1;
    
    while(roundval<=10){
        int i=0,j=0,k=0;
        
         
        if(roundval != 10){
            sa = SubBytes(sa,blocks);
            
            sa = ShiftRows(sa,blocks);
            
            
            
            sa = MixColumns(sa,blocks);
            
            
        }
        
        else{
            sa = SubBytes(sa,blocks);
            sa = ShiftRows(sa,blocks);
            
        }
        reskey = KeyGenerator(reskey,roundval);
        sa = AddRoundKey(sa,reskey,blocks);
        
        
    
        roundval++;
        
        
    }
    
    return sa;
    
    
    
    
}

uint8_t*** AESDecrypt(uint8_t*** ct, int blocks, uint8_t** key){
    
}

int main(){
    
    
    
    char str[] = "Two One Nine Two";
    
    /*printf("Enter string: ");
    scanf("%[^\n]%*c",str);*/
   
    int l = strlen(str);
    int blocks = l/16;
    int pad = l%16;
    int i=0,j=0,k=0;
    char* str1 = (char*)malloc(l*sizeof(char));
    while(str[i] != '\0'){
        str1[i] = str[i];
        i++;
    }
    
    uint8_t*** as = StateArraysGenerator(str1);
        
    for(i=0;i<blocks+1;i++){
        for(j=0;j<4;j++){
            for(k=0;k<4;k++)
                printf("%X\t",as[i][j][k]);
            printf("\n");
        }
        printf("\n\n");
        
    }
    
    printf("%s\n\n",toString(as,blocks,pad));
    uint8_t** key = (uint8_t**)malloc(4*sizeof(uint8_t*));
    for(i=0;i<4;i++)
        key[i] = (uint8_t*)malloc(4*sizeof(uint8_t));
    key[0][0] = 0x54;
    key[0][1] = 0x73;
    key[0][2] = 0x20;
    key[0][3] = 0x67;
    key[1][0] = 0x68;
    key[1][1] = 0x20;
    key[1][2] = 0x4b;
    key[1][3] = 0x20;
    key[2][0] = 0x61;
    key[2][1] = 0x6d;
    key[2][2] = 0x75;
    key[2][3] = 0x46;
    key[3][0] = 0x74;
    key[3][1] = 0x79;
    key[3][2] = 0x6e;
    key[3][3] = 0x75;
    printf("Cipher state arrays are:-\n");
    uint8_t*** ct = AESEncrypt(as,blocks,key);
    for(i=0;i<blocks+1;i++){
        for(j=0;j<4;j++){
            for(k=0;k<4;k++)
                printf("%X\t",ct[i][j][k]);
            printf("\n");
        }
        printf("\n\n");
        
    }
    return 0;
}
