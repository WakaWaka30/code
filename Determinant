#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int** MinorCreater(int **mat, int n, int r, int c){//gives segmentation fault when r=0 && c=0 because when r=0 k1 becomes n for n-1 bound so it is out of bound hence if-else condition was added when r=0 or r!=0
    int i=0,j=0,k1=0,k2=0;
    int** minor = (int**)malloc((n-1)*sizeof(int*));
    for(i=0;i<n-1;i++)
        *(minor+i) = (int*)malloc((n-1)*sizeof(int));
    if(r!=0){
        i=0;
        j=0;
    
        while(1){
            k2=0;
            j=0;
            while(1){
            
                if(j!=c && i!=r){
                    *(*(minor+k1)+k2) = *(*(mat+i)+j);
                    k2++;
                    //printf("%d--%d\n",*(*(minor+k1)+k2),*(*(mat+i)+j));
                    //printf("k1,k2 %d--%d\n",k1,k2);
                    //printf("i,j %d--%d\n",i,j);
                }
                j++;   
                if(j>n-1)
                    break;
            }
            i++;
            if(i!=r)
                k1++;
            if(i>n-1)
                break;
        }
    }
    else{
        k1=-1;
        i=0;
        j=0;
    
        while(1){
            k2=0;
            j=0;
            while(1){
            
                if(j!=c && i!=r){
                    *(*(minor+k1)+k2) = *(*(mat+i)+j);
                    k2++;
                    //printf("%d--%d\n",*(*(minor+k1)+k2),*(*(mat+i)+j));
                    //printf("k1,k2 %d--%d\n",k1,k2);
                    //printf("i,j %d--%d\n",i,j);
                }
                j++;   
                if(j>n-1)
                    break;
            }
            i++;
            if(i!=r)
                k1++;
            if(i>n-1)
                break;
        }
    }
        
    return minor;
    
}
void display(int **mat, int n){
    int i=0,j=0;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++)
            printf("%d\t",mat[i][j]);
        printf("\n");    
    }
        
}
int Det(int** mat, int n){
    int i=0,j=0,det=0;
    
    int **minor1 = (int**)malloc((n-1)*sizeof(int*));
    for(i=0;i<n-1;i++)
        *(minor1+i) = (int*)malloc((n-1)*sizeof(int));
       
    if(n == 2)
        det = mat[0][0]*mat[1][1]-mat[0][1]*mat[1][0];
        
    
    else   
        for(j=0;j<n;j++){
            minor1 = MinorCreater(mat,n,0,j);
            //printf("\n");
            //display(minor1,n-1);
            det = det + mat[0][j]*pow(-1,j)*Det(minor1,n-1);
            //printf("\n%d--%d",j,det);
        }
            
    return det;    
           
           
    
    
}

int main(){
    printf("Enter order of matrix: ");
    int n,i=0,j=0;
    scanf("%d",&n);
    int **mat;
    
    mat = (int**)malloc(n*sizeof(int*));
    for(i=0;i<n;i++)
        *(mat+i) = (int*)malloc(n*sizeof(int));
    printf("Input the elements in matrix:-\n");
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            printf("Enter element in (%d,%d) cell: ",i+1,j+1);
            scanf("%d",&mat[i][j]);
        }
        
    int **minor1 = MinorCreater(mat,n,0,0);
    display(mat,n);
    printf("\n");
    /*for(i=0;i<n-1;i++){
        for(j=0;j<n-1;j++)
            printf("%d\t",minor1[i][j]);
            
        printf("\n");
    }
    /*int** minor2 = MinorCreater(minor1,n-1,1,1);
    printf("\n");
    for(i=0;i<n-2;i++){
        for(j=0;j<n-2;j++)
            printf("%d\t",minor2[i][j]);
            
        printf("\n");
    }
    */
    int res = Det(mat,n);
    printf("\nDeterminant of the above matrix is %d",res);
    
    return 0;
    
}
