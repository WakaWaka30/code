#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

int*** SubMat(int** mat, int n){
    int i=0,j=0;
    int** submat1 = (int**)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        *(submat1+i) = (int*)malloc(n*sizeof(int));    
    int** submat2 = (int**)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        *(submat2+i) = (int*)malloc(n*sizeof(int));  
    int** submat3 = (int**)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        *(submat3+i) = (int*)malloc(n*sizeof(int));  
    int** submat4 = (int**)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        *(submat4+i) = (int*)malloc(n*sizeof(int));  
        
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            if((i>=0 && i<n/2) && (j>=0 && j<n/2))
                submat1[i][j] = mat[i][j];
            else if((i>=0 && i<n/2) && (j>=n/2 && j<n))
                submat2[i%(n/2)][j%(n/2)] = mat[i][j];
            else if((i>=n/2 && i<n) && (j>=0 && j<n/2))
                submat3[i%(n/2)][j%(n/2)] = mat[i][j];
            else
                submat4[i%(n/2)][j%(n/2)] = mat[i][j];    
                
        }
        
    int*** res = (int***)malloc(4*sizeof(int**));
    *res = submat1;
    *(res+1) = submat2;
    *(res+2) = submat3;
    *(res+3) = submat4;
    
    return res;
    
    
}

int** matinitialise(int n){
    int i=0;
    int** mat = (int**)malloc(n*sizeof(int*));
    for(i=0;i<n;i++)
        *(mat+i) = (int*)malloc(n*sizeof(int));
    return mat;    
}

int** matmul(int** mat1, int** mat2, int n){
    int** mat3 = matinitialise(n);
    int i=0,j=0,k=0;
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)    
            mat3[i][j] = 0;
            
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            for(k=0;k<n;k++)
                mat3[i][j] = mat3[i][j] + mat1[i][k]*mat2[k][j];
    return mat3;
    
}

int** matcombine(int*** res, int n){
    int i=0,j=0;
    int** mat = (int**)malloc(n*sizeof(int*));
    for(i=0;i<n;i++)
        *(mat+i) = (int*)malloc(n*sizeof(int));
    int** submat1 = (int**)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        *(submat1+i) = (int*)malloc(n*sizeof(int));    
    int** submat2 = (int**)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        *(submat2+i) = (int*)malloc(n*sizeof(int));  
    int** submat3 = (int**)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        *(submat3+i) = (int*)malloc(n*sizeof(int));  
    int** submat4 = (int**)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        *(submat4+i) = (int*)malloc(n*sizeof(int));  
    submat1 = *res;
    submat2 = *(res+1);
    submat3 = *(res+2);
    submat4 = *(res+3);
    
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            if((i>=0 && i<n/2) && (j>=0 && j<n/2))
                mat[i][j] = submat1[i][j];
            else if((i>=0 && i<n/2) && (j>=n/2 && j<n))
                mat[i][j] = submat2[i%(n/2)][j%(n/2)];
            else if((i>=n/2 && i<n) && (j>=0 && j<n/2))
                mat[i][j] = submat3[i%(n/2)][j%(n/2)];
            else
                mat[i][j] = submat4[i%(n/2)][j%(n/2)];    
                
        }
    return mat;    
    
}

int** matadd(int** mat1, int** mat2, int n){
    int i=0,j=0;
    int** mat3 = (int**)malloc(n*sizeof(int*));
    for(i=0;i<n;i++)
        *(mat3+i) = (int*)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            mat3[i][j] = mat1[i][j] + mat2[i][j];
    return mat3;        
}

int** matsub(int** mat1, int** mat2, int n){
    int i=0,j=0;
    int** mat3 = (int**)malloc(n*sizeof(int*));
    for(i=0;i<n;i++)
        *(mat3+i) = (int*)malloc(n*sizeof(int));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            mat3[i][j] = mat1[i][j] - mat2[i][j];
    return mat3;        
}

void matinp(int** mat, int n){
    int i=0,j=0;
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            printf("Enter element in (%d,%d) cell: ",i+1,j+1);
            scanf("%d",&mat[i][j]);
            
        }
        
            
}

void display(int** mat, int n){
    int i=0,j=0;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++)
            printf("%d\t",mat[i][j]);
            
        printf("\n");
    }
    
}


int** Strassenmatmul(int** mat1, int** mat2, int n){
    int i=0,j=0;
    int** mat3 = (int**)malloc(n*sizeof(int*));
    for(i=0;i<n;i++)
        *(mat3+i) = (int*)malloc(n*sizeof(int));
    if(n == 2){
        mat3[0][0] = mat1[0][0]*mat2[0][0]+mat1[0][1]*mat2[1][0];
        mat3[0][1] = mat1[0][0]*mat2[0][1]+mat1[0][1]*mat2[1][1];
        mat3[1][0] = mat1[1][0]*mat2[0][0]+mat1[1][1]*mat2[1][0];
        mat3[1][1] = mat1[1][0]*mat2[0][1]+mat1[1][1]*mat2[1][1];
        
    }
    
    else{
        int*** res1 = SubMat(mat1,n);
        int*** res2 = SubMat(mat2,n);
        int** submatA = *res1;
        int** submatB = *(res1+1);
        int** submatC = *(res1+2);
        int** submatD = *(res1+3);
        int** submatE = *res2;
        int** submatF = *(res2+1);
        int** submatG = *(res2+2);
        int** submatH = *(res2+3);
        
        int** submatI = (int**)malloc((n/2)*sizeof(int*));
        for(i=0;i<n;i++)
            *(submatI+i) = (int*)malloc((n/2)*sizeof(int));
        int** submatJ = (int**)malloc((n/2)*sizeof(int*));
        for(i=0;i<n;i++)
            *(submatJ+i) = (int*)malloc((n/2)*sizeof(int));
        int** submatK = (int**)malloc((n/2)*sizeof(int*));
        for(i=0;i<n;i++)
            *(submatK+i) = (int*)malloc((n/2)*sizeof(int));
        int** submatL = (int**)malloc((n/2)*sizeof(int*));
        for(i=0;i<n;i++)
            *(submatL+i) = (int*)malloc((n/2)*sizeof(int));
            
        int** M1 = matinitialise(n/2);  
        int** M2 = matinitialise(n/2);   
        int** M3 = matinitialise(n/2);   
        int** M4 = matinitialise(n/2);   
        int** M5 = matinitialise(n/2);   
        int** M6 = matinitialise(n/2);   
        int** M7 = matinitialise(n/2);   
        
        M1 = Strassenmatmul(matadd(submatA,submatC,n/2),matadd(submatE,submatF,n/2),n/2);
        M2 = Strassenmatmul(matadd(submatB,submatD,n/2),matadd(submatG,submatH,n/2),n/2);
        M3 = Strassenmatmul(matsub(submatA,submatD,n/2),matadd(submatE,submatH,n/2),n/2);    
        M4 = Strassenmatmul(submatA,matsub(submatF,submatH,n/2),n/2);
        M5 = Strassenmatmul(matadd(submatC,submatD,n/2),submatE,n/2);
        M6 = Strassenmatmul(matadd(submatA,submatB,n/2),submatH,n/2);
        M7 = Strassenmatmul(submatD,matsub(submatG,submatE,n/2),n/2);
        
        submatI = matsub(matadd(M2,M3,n/2),matadd(M6,M7,n/2),n/2);
        submatJ = matadd(M4,M6,n/2);
        submatK = matadd(M5,M7,n/2);
        submatL = matsub(M1,matadd(matadd(M3,M4,n/2),M5,n/2),n/2);
        
        int*** res3 = (int***)malloc(4*sizeof(int**));
        *res3 = submatI;
        *(res3+1) = submatJ;
        *(res3+2) = submatK;
        *(res3+3) = submatL;
        
        mat3 = matcombine(res3,n);
    }
    return mat3;
    
}

int** randominp(int** mat, int n){ //to give random inputs in matrix
    int i=0,j=0;
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            mat[i][j] = rand()%10;
    return mat;        
}

void matcompare(int** mat1, int** mat2, int n){
    int i=0,j=0;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++)
            if(mat1[i][j] != mat2[i][j])
                break;
        if(mat1[i][j] != mat2[i][j])
            break;
    }
    if(i != n){
        printf("Matrix 1:-\n");
        display(mat1,n);
        printf("Matrix 2:-\n");
        display(mat2,n);
        printf("Both matrices are not equal");
    }
    else{
        printf("Matrix 1:-\n");
        display(mat1,n);
        printf("Matrix 2:-\n");
        display(mat2,n);
        
        printf("Matrices are equal");
    }
            
}

int main(){
    int i=0,j=0;
    //clock_t t;
    //t = clock();
    printf("Enter order of matrix (must be an integer power of 2): ");
    int n;
    scanf("%d",&n);
    double x;
    x = log(n)/log(2);
    if(x-(int)x != 0){
        printf("%d is not an integer power of 2",n);
        return 0;
    }
    
    printf("Enter elements into matrix A:-\n");
    int** mat1 = (int**)malloc(n*sizeof(int*));
    for(i=0;i<n;i++)
        *(mat1+i) = (int*)malloc(n*sizeof(int));
    matinp(mat1,n);
    //randominp(mat1,n);
    printf("Inputted matrix A is:-\n");
    display(mat1,n);
    printf("\n");
    printf("Enter elements into matrix B:-\n");
    int** mat2 = (int**)malloc(n*sizeof(int*));
    for(i=0;i<n;i++)
        *(mat2+i) = (int*)malloc(n*sizeof(int));
    matinp(mat2,n);
    //randominp(mat2,n);
    printf("Inputted matrix B is:-\n");
    display(mat2,n);
    
    printf("Product of matrices, AxB is:-\n");
    int** mat3 = Strassenmatmul(mat1,mat2,n);
    //int** mat4 = matmul(mat1,mat2,n);
    //matcompare(mat3,mat4,n); //comparing product matrix found through two different methods to check whether Strassen matrix multiplication gives valid product matrix or not
    
    display(mat3,n);
    //t = clock() - t;
    //double time_taken = ((double)t)/CLOCKS_PER_SEC; 
    //printf("\nProgram took %.3f seconds to execute", time_taken); //to calculate execution time of program
    return 0;
    
    /*int*** res1 = SubMat(mat,n);
    printf("Submatrices of above matrix are:-\n");
    for(i=0;i<4;i++){
        printf("Submatrix: %d\n",i+1);
        display(*(res1+i),n/2);
        printf("\n");
    }
    printf("\nMatrix after combining submatrices is:-\n");
    int** mat1 = matcombine(res1,n);
    display(mat1,n);*/
    
    


}
