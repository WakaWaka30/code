#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>


int gcd(int m, int n){
    if(m%n == 0)
        return n;
     
    else if(m == n)
        return m;
    else if(m>n)
        return gcd(n,m%n);
    else
        return gcd(m,n%m);
}
        
    
int CheckPrime(int n){
    int i=0;
    for(i=2;i<=n/2;i++){
        if(n%i == 0)
            break;
            
    }
    
    if(i == (n/2)+1 && n != 1)
        return 1;
    else
        return 0;
    
}

int CheckDivide(int x, int y){
    //how many times does x divide y
    int count=0,j=1,z=x;
    while(1){
        if(y%x == 0){
            
            count++;
            j++;
            x = pow(z,j);
            
        }
        else
            break;
    }
    return count;
    
}

int* PrimeFactors(int n){
    int *p;
    int i=0, count=0,j=1;
    for(i=2;i<=n;i++)
        if(n%i == 0 && CheckPrime(i) == 1)
            count++;
    p = (int*)malloc((2*count)*sizeof(int));
    *p = 2*count;
    for(i=2;i<=n;i++){
        if(n%i == 0 && CheckPrime(i) == 1){
            *(p+j) = i;
            *(p+j+1) = CheckDivide(i,n);
            
            j = j+2;
            
        }
        else 
            continue;
    }
    return p;
          
}

int Totient(int n){
    if(CheckPrime(n) == 1)
        return n-1;
    else{ 
        
        int phin=1;
        int* p = PrimeFactors(n);
        int a = *p;
        int i=0,k,l;
        for(i=1;i<=a;i=i+2){
            k=*(p+i);
            l=*(p+i+1);
            phin=phin*(pow(k,l)-pow(k,l-1));
        }
        free(p);
        return phin;
    }
            
    
    
}

int mulinverse(int x, int n){
    if(x>n || gcd(n,x) != 1)
        return 0;
    else{
        int t1 = 0;
        int t2 = 1,t,q,r1=n,r2=x,r;
        //printf("q\tr1\tr2\tr\tt1\tt2\tt\n");
        while(1){
            q = r1/r2;
            r = r1%r2;
            t = t1-q*t2;
            //printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n",q,r1,r2,r,t1,t2,t);
            if(r != 0){
                r1 = r2;
                r2 = r;
                t1 = t2;
                t2 = t;
            }
            else
                break;
            
        }
        if(t2>0)
            return t2;
        else
            return t2+n;
    }
    
    
}

int* toASCII(char* str, int m){
    
    int* p = (int*)malloc(m*sizeof(int));
    int i=0,d;
    for(i=0;i<m;i++){
        d = (int)*(str+i);
        *(p+i) = d;
        
        
    }
    return p;
    
}

int powermod(int p, int b, int m){
    
    int i=0;
    int res = 1;
    for(i=0;i<p;i++){
        res = res*b;
        res = res%m;
        
        
    }
    
    return res;
}

int CheckPK(int e, int n){
    int z = Totient(n);
    if(e>=z)
        return 0;
    else if(gcd(z,e) != 1)
        return 0;
    else
        return 1;
}
int* RSAencrypt(int* plain, int p, int q, int x, int e){
    int n = p*q;
    int phiofn = Totient(n);
    int i=0,y;
    int* encrypt = (int*)malloc((x+1)*sizeof(int));
    *encrypt = e;
    for(i=0;i<x;i++){
        y = *(plain+i);
        
        *(encrypt+i+1) = powermod(e,y,n);
        
    }
    return encrypt;
    
}

char* RSAdecrypt(int* cipher, int p, int q, int x){
    int n = p*q;
    int e = *cipher;
    int z = Totient(n);
    int d=mulinverse(e,z);
    
    int i=0,s;
    char* plain = (char*)malloc(x*sizeof(char));
    for(i=0;i<x;i++){
        s = *(cipher+i+1);
        s=powermod(d,s,n);
        
        *(plain+i) = (char)s;
    }
    return plain;
}

int main(){
    int x,y,x1,x2,e;
    int n,i=0,choice;
    char *c,*charciph;
   
    printf("Enter string length: ");
    scanf("%d",&x);
    c = (char*)malloc(x*sizeof(char));
    charciph = (char*)malloc(x*sizeof(char));
    printf("Enter string: ");
    scanf("%s",c);
    int* plain = toASCII(c,x);
    printf("Enter first prime number: ");
    scanf("%d",&x1);
    if(CheckPrime(x1) == 0){
        printf("%d is not prime",x1);
        return 0;
    }
    printf("Enter second prime number: ");
    scanf("%d",&y);
    if(CheckPrime(y) == 0){
        printf("%d is not prime",x1);
        return 0;
    }
        
    printf("Enter public key(e) such that it is less than %d and it is coprime to it: ",Totient(x1*y));
    scanf("%d",&e);
    if(CheckPK(e,x1*y) == 0){
        printf("%d cannot be used as the public key",e);
        return 0;
    }
    int* cipher = RSAencrypt(plain,x1,y,x,e);
    printf("Enter 1 if you want numerical output\nEnter 2 if you want character output: ");
    scanf("%d",&choice);
    if(choice == 1){
        for(i=0;i<x;i++)
            printf("%d ",*(cipher+i+1));
    }
    else if(choice == 2){
        for(i=1;i<=x;i++){
            n=*(cipher+i);
            n=(n%94)+33;
            *(charciph+i) = (char)n;
            
            
        }
        printf("%s",charciph);
    }
    int aq;
    int* cipher1;
    printf("\nEnter 2 if you want to decrypt: ");
    scanf("%d",&x2);
    if(x2 == 2){
        printf("Enter number of numeric message blocks: ");
        scanf("%d",&aq);
        cipher1 = (int*)malloc((aq+1)*sizeof(int));
        printf("Enter value of public key e: ");
        scanf("%d",cipher1);
        printf("Enter the numeric message blocks:-\n");
        for(i=0;i<aq;i++){
            printf("Enter %dth message block: ",i+1);
            scanf("%d",(cipher1+i+1));
        }
        char* c1 = RSAdecrypt(cipher1,x1,y,x);
        printf("\n%s",c1);
        
    }
    
    
    else
        return 0;
    
    
    
    
    
    
    return 0;
    
}
