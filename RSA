#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <time.h>

int gcd(int m, int n){
    if(m%n == 0)
        return n;
     
    else if(m == n)
        return m;
    else if(m>n)
        return gcd(n,m%n);
    else
        return gcd(m,n%m);
}
        
    
    
        
int pow1(int b, int p){
    int i=0,z=b;
    for(i=1;i<p;i++)
        b=b*z;
    return b;    
}        
    
        

int CheckPrime(int n){
    int i=0;
    for(i=2;i<=n/2;i++){
        if(n%i == 0)
            break;
            
    }
    
    if(i == (n/2)+1 && n != 1)
        return 1;
    else
        return 0;
    
}

int CheckDivide(int x, int y){
    //how many times does x divide y
    int count=0,j=1,z=x;
    while(1){
        if(y%x == 0){
            
            count++;
            j++;
            x = pow1(z,j);
            
        }
        else
            break;
    }
    return count;
    
}

int* PrimeFactors(int n){
    int *p;
    int i=0, count=0,j=1;
    for(i=2;i<=n;i++)
        if(n%i == 0 && CheckPrime(i) == 1)
            count++;
    p = (int*)malloc((2*count)*sizeof(int));
    *p = 2*count;
    for(i=2;i<=n;i++){
        if(n%i == 0 && CheckPrime(i) == 1){
            *(p+j) = i;
            *(p+j+1) = CheckDivide(i,n);
            
            j = j+2;
            
        }
        else 
            continue;
    }
    return p;
          
}

int Totient(int n){
    if(CheckPrime(n) == 1)
        return n-1;
    else{    
        int phin=1;
        int* p = PrimeFactors(n);
        int a = *p;
        int i=0,k,l;
        for(i=1;i<=a;i=i+2){
            k=*(p+i);
            l=*(p+i+1);
            phin=phin*(pow1(k,l)-pow1(k,l-1));
        }
        return phin;
    }
            
    
    
}

int mulinverse(int x, int n){
    if(x>n || gcd(n,x) != 1)
        return 0;
    else{
        int t1 = 0;
        int t2 = 1,t,q,r1=n,r2=x,r;
        //printf("q\tr1\tr2\tr\tt1\tt2\tt\n");
        while(1){
            q = r1/r2;
            r = r1%r2;
            t = t1-q*t2;
            //printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n",q,r1,r2,r,t1,t2,t);
            if(r != 0){
                r1 = r2;
                r2 = r;
                t1 = t2;
                t2 = t;
            }
            else
                break;
            
        }
        if(t2>0)
            return t2;
        else
            return t2+n;
    }
    
    
}
void display(int* ptr){
    int a = *ptr;
    int i=0;
   
    for(i=1;i<=a;i=i+2)
        printf("%d\t%d\n",*(ptr+i),*(ptr+i+1));
    
    
}
int* toASCII(char* str){
    int m = strlen(str);
    int* p = (int*)malloc(m*sizeof(int));
    int i=0,d;
    for(i=0;i<m;i++){
        d = (int)*(str+i);
        *(p+i) = d;
        
    }
    return p;
    
}

int powermod(int p, int b, int m){
    
    int i=0;
    int res = 1;
    for(i=0;i<p;i++){
        res = res*b;
        res = res%m;
        
        
    }
    
    return res;
}

int* RSAencrypt(int* plain, int p, int q, int x){
    int n = p*q;
    int phiofn = Totient(n);
    int i=0;
    int e=2;
    int e1[10];
    int j=0;
    for(i=2;i<12;i++){
        e++;
    
        if(e>1 && e<phiofn && gcd(e,phiofn) == 1){
            e1[j] = e;    
            j++;
            
        }
        
    }
    int s = rand()%10;
    e = e1[s];
    int y;
    int* encrypt = (int*)malloc((x+1)*sizeof(int));
    *encrypt = e;
    for(i=1;i<=x;i++){
        y = *(plain+i);
        *(encrypt+i) = powermod(e,y,n);
    }
    return encrypt;
    
}
char* tolowercase(char* str){
    int i=0,j=0,m,l;
    
    char s[] = "Letters are not in uppercase";
    int n = strlen(s);
    char* s1 = (char*)malloc(n*sizeof(char));
    for(i=0;i<n;i++)
        *(s1+i) = s[i];
    m = strlen(str);
    for(i=0;i<m || *(str+i)=='\0';i++){
        if(*(str+i)>= 65 && *(str+i) <= 91)
        
            *(str+i) = *(str+i) + 32;
                
            
    
                
        else 
            break;
    }
    if(i==m)
        return str;
    else
        return s1;
}

int main(){
    int x,y,x1;
    int n,i=0,choice;
    char *c,*charciph;
   
    printf("Enter string length: ");
    scanf("%d",&x);
    c = (char*)malloc(x*sizeof(char));
    charciph = (char*)malloc(x*sizeof(char));
    printf("Enter string: ");
    scanf("%s",c);
    int* plain = toASCII(c);
    printf("Enter first prime number: ");
    scanf("%d",&x1);
    printf("Enter second prime number: ");
    scanf("%d",&y);
    int* cipher = RSAencrypt(plain,x1,y,x);
    printf("Enter 1 if you want numerical output\nEnter 2 if you want character output: ");
    scanf("%d",&choice);
    if(choice == 1){
        for(i=1;i<x;i++)
            printf("%d ",*(cipher+i));
    }
    else if(choice == 2){
        for(i=1;i<x;i++){
            n=*(cipher+i);
            n=(n%94)+33;
            *(charciph+i) = (char)n;
            
            
        }
        printf("%s",charciph);
    }
    
    
    /*printf("Enter power: ");
    scanf("%d",&x);
    printf("Enter base: ");
    scanf("%d",&y);
    printf("Enter mod: ");
    scanf("%d",&n);
    int res = powermod(x,y,n);
    printf("%d",res);*/
    
    
    
    
    
    
    
    
    return 0;
    
}
